{"version":3,"sources":["pages/home/Home.js","component/header/Header.js","component/main/Main.js","pages/study/Study.js","pages/work/Work.js","pages/logs/Logs.js","shared/App.js","router/Root.js","store/user.js","serviceWorker.js","index.js"],"names":["props","console","log","store","className","TextField","id","label","to","date","Main","handleClickStartWork","Date","start","getHours","getMinutes","getSeconds","setState","handleClickEndWork","end","state","this","onClick","React","Component","getFullYear","getMonth","getDate","Logs","App","exact","path","component","Home","Work","Study","Root","initialState","isLogined","userName","Boolean","window","location","hostname","match","createStore","action","type","user","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52e9935f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function(props) {\r\n    console.log(props.store);\r\n    return (\r\n        <div className=\"home\">\r\n            <form>\r\n                <TextField \r\n                id=\"name\" \r\n                label=\"이름\"></TextField>\r\n            </form>\r\n            <div><Link to=\"work\">출퇴근</Link></div>\r\n            <div><Link to=\"study\">공부 타이머</Link></div>\r\n            <div><Link to=\"logs\">기록확인</Link></div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div id=\"header\" className=\"header\">{props.date}</div>\r\n    )\r\n}","import React from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: '-',\r\n      end: '-'\r\n    }\r\n  }\r\n\r\n  handleClickStartWork = () => {\r\n    var date = new Date();\r\n    var start = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n    this.setState({\r\n      start: start\r\n    });\r\n  }\r\n\r\n  handleClickEndWork = () => {\r\n    var date = new Date();\r\n    var end = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n    this.setState({\r\n      end: end\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"Main\">\r\n        <div id=\"start\" className=\"start_work\">{this.state.start}</div>\r\n        <div id=\"end\" className=\"end_work\">{this.state.end}</div>\r\n        <div id=\"buttonBox\" className=\"button_box\">\r\n            <button className=\"work_btn default\" onClick={this.handleClickStartWork}>{this.props.start}</button>\r\n            <button className=\"work_btn default\" onClick={this.handleClickEndWork}>{this.props.end}</button>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function() {\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main start=\"시작\" end=\"끝\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function(props) {\r\n    console.log(props);\r\n\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main start=\"출근\" end=\"퇴근\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nclass Logs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>log page</div>\r\n        )\r\n    }\r\n            \r\n}\r\n\r\nexport default Logs;","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Home, Work, Study, Logs } from '../pages';\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Route exact path=\"/\" component={Home}/>\r\n                <Route path=\"/work\" component={Work}/>\r\n                <Route path=\"/study\" component={Study}/>\r\n                <Route path=\"/logs\" component={Logs}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;","const LOGIN = 'user/LOGIN';\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const login = user => ({type: login, user});\r\nexport const logout = user => ({type: logout, user});\r\n\r\nconst initialState = {\r\n    isLogined: false,\r\n    userName: '',\r\n};\r\n\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                isLogined: true,\r\n                userName: action.user\r\n            };\r\n        case LOGOUT :\r\n            return {\r\n                ...state,\r\n                isLogined: false,\r\n                userName: action.user\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './router/Root';\r\nimport { createStore } from 'redux';\r\nimport userReducer from './store/user';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(userReducer);\r\n\r\nReactDOM.render(<Provider store={store}><Root /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}