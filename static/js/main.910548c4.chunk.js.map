{"version":3,"sources":["fireStore/fireStore.js","store/user.js","pages/home/Home.js","component/header/Header.js","component/main/Main.js","pages/study/Study.js","pages/work/Work.js","pages/logs/Logs.js","router/Root.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","databaseURL","projectId","fireStore","LOGIN","login","user","type","initialState","isLogined","userName","Home","props","event","preventDefault","collection","doc","state","get","then","exists","data","userId","console","log","catch","error","logout","handleNameChange","setState","target","value","className","onSubmit","this","TextField","id","name","onChange","label","Button","onClick","to","React","Component","connect","date","Main","formatDate","getHours","getMinutes","getSeconds","handleClickStartWork","start","Date","handleClickEndWork","end","prevProps","startTime","endTime","startWord","endWord","getFullYear","getMonth","getDate","Work","getDoc","where","docs","forEach","seconds","Logs","Root","store","persistor","loading","basename","exact","path","component","Study","Boolean","window","location","hostname","match","persistConfig","key","storage","enhancedReducer","persistReducer","action","createStore","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.910548c4.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport \"firebase/firestore\";\r\n\r\nvar config = {\r\n    apiKey: 'AIzaSyD_Ng68vtXdquFcfMrcW76XBhboXErYrh8',\r\n    databaseURL: 'https://working-hours-52642.firebaseio.com/',\r\n    projectId: 'working-hours-52642'\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nvar fireStore = firebase.firestore();\r\n\r\nexport default fireStore;","const LOGIN = 'user/LOGIN';\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const login = user => ({type: LOGIN, user});\r\nexport const logout = user => ({type: LOGOUT, user});\r\n\r\nconst initialState = {\r\n    isLogined: false,\r\n    userName: ''\r\n};\r\n\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                isLogined: true,\r\n                userName: action.user\r\n            };\r\n        case LOGOUT :\r\n            return {\r\n                ...state,\r\n                isLogined: false,\r\n                userName: action.user\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport fireStore from '../../fireStore/fireStore';\r\nimport { connect } from 'react-redux';\r\nimport { login, logout } from '../../store/user';\r\n\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: ''\r\n        }\r\n    }\r\n\r\n    login = (event) => {\r\n        event.preventDefault();\r\n        var userData = fireStore.collection('users').doc(this.state.userName);\r\n        userData.get().then(doc => {\r\n            if (doc.exists) {\r\n                this.props.login(doc.data().userId);\r\n            } else {\r\n                console.log('not exist user');\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        })\r\n    }\r\n\r\n    logout = (event) => {\r\n        this.props.logout();\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        this.setState({\r\n            userName: event.target.value\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"home\">\r\n                <form onSubmit={this.login}>\r\n                    <TextField \r\n                    id=\"userName\"\r\n                    name=\"userName\"\r\n                    onChange={this.handleNameChange}\r\n                    label=\"이름\"></TextField>\r\n                    <Button type=\"submit\">LOGIN</Button>\r\n                </form>\r\n                <Button type=\"button\" onClick={this.logout}>LOGOUT</Button>\r\n                <div><Link to=\"work\">출퇴근</Link></div>\r\n                <div><Link to=\"study\">공부 타이머</Link></div>\r\n                <div><Link to=\"logs\">기록확인</Link></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state }),\r\n    { login, logout }\r\n) (Home);","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div id=\"header\" className=\"header\">{props.date}</div>\r\n    )\r\n}","import React from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: '-',\r\n      end: '-'\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if (this.props !== prevProps) {\r\n      this.setState({\r\n        ...this.state,\r\n        start: this.formatDate(new Date(this.props.startTime * 1000)),\r\n        end: this.formatDate(new Date(this.props.endTime * 1000))\r\n      })\r\n    }\r\n  }\r\n\r\n  formatDate = (date) => {\r\n    return date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n  }\r\n\r\n  handleClickStartWork = () => {\r\n    this.setState({\r\n      start: this.formatDate(new Date())\r\n    });\r\n  }\r\n\r\n  handleClickEndWork = () => {\r\n    this.setState({\r\n      end: this.formatDate(new Date())\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"Main\">\r\n        <div id=\"start\" className=\"start_work\">{this.state.start}</div>\r\n        <div id=\"end\" className=\"end_work\">{this.state.end}</div>\r\n        <div id=\"buttonBox\" className=\"button_box\">\r\n            <button className=\"work_btn default\" onClick={this.handleClickStartWork}>{this.props.startWord}</button>\r\n            <button className=\"work_btn default\" onClick={this.handleClickEndWork}>{this.props.endWord}</button>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function(props) {\r\n\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main startWord=\"시작\" endWord=\"끝\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\nimport fireStore from '../../fireStore/fireStore';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../store/user';\r\n\r\nclass Work extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            startTime: '-',\r\n            endTime: '-'\r\n        }\r\n        this.getDoc();\r\n    }\r\n\r\n    getDoc = () => {\r\n        console.log(this.props)\r\n        if (this.props.user.isLogined) {\r\n            var userData = fireStore.collection('users').doc(this.props.user.userName);\r\n            userData.collection('work')\r\n            .where('start', '<=', new Date()).get().then(docs => {\r\n                docs.forEach(doc => {\r\n                    this.setState({\r\n                        startTime: doc.data().start.seconds,\r\n                        endTime: doc.data().end.seconds\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    getDate = () => {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header date={this.getDate()}></Header>\r\n                <Main startWord=\"출근\" endWord=\"퇴근\" startTime={this.state.startTime} endTime={this.state.endTime}></Main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state }),\r\n    { login }\r\n)(Work)","import React from 'react'\r\n\r\nclass Logs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>log page</div>\r\n        )\r\n    }\r\n            \r\n}\r\n\r\nexport default Logs;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Home, Work, Study, Logs } from '../pages';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nconst Root = ({ store, persistor }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <Router basename=\"/working-hours\">\r\n                    <Route exact path=\"/\" component={Home}/>\r\n                    <Route path=\"/work\" component={Work}/>\r\n                    <Route path=\"/study\" component={Study}/>\r\n                    <Route path=\"/logs\" component={Logs}/>\r\n                </Router>\r\n            </PersistGate>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './router/Root';\r\nimport { createStore } from 'redux';\r\nimport userReducer from './store/user';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n};\r\n\r\nconst enhancedReducer = persistReducer(persistConfig, userReducer);\r\n\r\nconst store = createStore(enhancedReducer);\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(<Root store={store} persistor={persistor}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}