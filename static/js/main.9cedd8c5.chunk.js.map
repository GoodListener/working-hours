{"version":3,"sources":["fireStore/fireStore.js","store/user.js","component/login/Login.js","pages/home/Home.js","component/header/Header.js","component/main/Main.js","pages/study/Study.js","pages/work/Work.js","pages/logs/Logs.js","router/Root.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","databaseURL","projectId","fireStore","LOGIN","initialState","isLogined","userName","Login","props","login","event","preventDefault","collection","doc","state","get","then","exists","data","userId","console","log","catch","error","logout","handleNameChange","setState","target","value","user","Button","type","onClick","onSubmit","TextField","id","name","onChange","label","React","Component","connect","Home","className","to","date","Main","formatDate","toString","getHours","getMinutes","getSeconds","handleClickStartWork","start","Date","onClickStartTime","handleClickEndWork","end","onClickEndTime","handleClickCompleteWork","onClickComplete","prevProps","this","startTime","endTime","startWord","endWord","getFullYear","getMonth","getDate","Work","getDoc","where","getYesterday","docs","forEach","seconds","setHours","setDate","getDocDate","year","month","day","substring","setStartTime","userData","set","add","res","setEndTime","update","alert","setComplete","Logs","Root","store","persistor","loading","basename","exact","path","component","Study","Boolean","window","location","hostname","match","persistConfig","key","storage","enhancedReducer","persistReducer","action","createStore","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9cedd8c5.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport \"firebase/firestore\";\r\n\r\nvar config = {\r\n    apiKey: 'AIzaSyD_Ng68vtXdquFcfMrcW76XBhboXErYrh8',\r\n    databaseURL: 'https://working-hours-52642.firebaseio.com/',\r\n    projectId: 'working-hours-52642'\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nvar fireStore = firebase.firestore();\r\n\r\nexport default fireStore;","const LOGIN = 'user/LOGIN';\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const login = user => ({type: LOGIN, user});\r\nexport const logout = user => ({type: LOGOUT, user});\r\n\r\nconst initialState = {\r\n    isLogined: false,\r\n    userName: ''\r\n};\r\n\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                isLogined: true,\r\n                userName: action.user\r\n            };\r\n        case LOGOUT :\r\n            return {\r\n                ...state,\r\n                isLogined: false,\r\n                userName: action.user\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport fireStore from '../../fireStore/fireStore';\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { login, logout } from '../../store/user';\r\n\r\nclass Login extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: ''\r\n        }\r\n    }\r\n\r\n    login = (event) => {\r\n        event.preventDefault();\r\n        var userData = fireStore.collection('users').doc(this.state.userName);\r\n        userData.get().then(doc => {\r\n            if (doc.exists) {\r\n                this.props.login(doc.data().userId);\r\n            } else {\r\n                console.log('not exist user');\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        })\r\n    }\r\n\r\n    logout = (event) => {\r\n        this.props.logout();\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        this.setState({\r\n            userName: event.target.value\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return ((() => {\r\n            if (this.props.user.isLogined) {\r\n                return (\r\n                <Button type=\"button\" onClick={this.logout}>LOGOUT</Button>\r\n            )} else {\r\n                return (\r\n                    <form onSubmit={this.login}>\r\n                        <TextField \r\n                        id=\"userName\"\r\n                        name=\"userName\"\r\n                        onChange={this.handleNameChange}\r\n                        label=\"이름\"></TextField>\r\n                        <Button type=\"submit\">LOGIN</Button>\r\n                    </form>\r\n                )\r\n            }\r\n        })())\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state }),\r\n    { login, logout }\r\n) (Login);","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Login from '../../component/login/Login'\r\n\r\nclass Home extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"home\">\r\n                <Login></Login>\r\n                <div><Link to=\"work\">출퇴근</Link></div>\r\n                <div><Link to=\"study\">공부 타이머</Link></div>\r\n                <div><Link to=\"logs\">기록확인</Link></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state }),\r\n    { }\r\n) (Home);","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div id=\"header\" className=\"header\">{props.date}</div>\r\n    )\r\n}","import React from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: '-',\r\n      end: '-'\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if (this.props !== prevProps) {\r\n      this.setState({\r\n        ...this.state,\r\n        start: this.formatDate(new Date(this.props.startTime * 1000)),\r\n        end: this.formatDate(new Date(this.props.endTime * 1000))\r\n      })\r\n    }\r\n  }\r\n\r\n  formatDate = (date) => {\r\n    if (date.toString() === \"Invalid Date\") {\r\n      return \"-\";\r\n    }\r\n    return date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n  }\r\n\r\n  handleClickStartWork = () => {\r\n    this.setState({\r\n      start: this.formatDate(new Date())\r\n    });\r\n    this.props.onClickStartTime(new Date());\r\n  }\r\n\r\n  handleClickEndWork = () => {\r\n    this.setState({\r\n      end: this.formatDate(new Date())\r\n    });\r\n    this.props.onClickEndTime(new Date());\r\n  }\r\n\r\n  handleClickCompleteWork = () => {\r\n    this.props.onClickComplete();\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"Main\">\r\n        <div id=\"start\" className=\"start_work\">{this.state.start}</div>\r\n        <div id=\"end\" className=\"end_work\">{this.state.end}</div>\r\n        <div id=\"buttonBox\" className=\"button_box\">\r\n            <button className=\"work_btn default\" onClick={this.handleClickStartWork}>{this.props.startWord}</button>\r\n            <button className=\"work_btn default\" onClick={this.handleClickEndWork}>{this.props.endWord}</button>\r\n        </div>\r\n        {(() => {\r\n          if (this.state.start !== '-' && this.state.end !== '-') {\r\n            return (\r\n              <div>\r\n                  <button className=\"work_btn\" onClick={this.handleClickCompleteWork}>complete</button>\r\n              </div>\r\n            )\r\n          } \r\n        })()}\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function(props) {\r\n\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main startWord=\"시작\" endWord=\"끝\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\nimport fireStore from '../../fireStore/fireStore';\r\nimport { connect } from 'react-redux';\r\n\r\nconst RUNNING = 10;\r\nconst COMPLETE = 20;\r\n\r\nclass Work extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            id: null,\r\n            startTime: '-',\r\n            endTime: '-'\r\n        }\r\n        this.getDoc();\r\n    }\r\n\r\n    getDoc = () => {\r\n        if (this.props.user.isLogined) {\r\n            var userData = fireStore.collection('users').doc(this.props.user.userName);\r\n            userData.collection('work')\r\n            .where('start', '>=', this.getYesterday())\r\n            .where('state', '==', RUNNING).get().then(docs => {\r\n                docs.forEach(doc => {\r\n                    this.setState({\r\n                        id: doc.id,\r\n                        startTime: doc.data().start.seconds ? doc.data().start.seconds : '-',\r\n                        endTime: doc.data().end.seconds ? doc.data().end.seconds : '-',\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    getYesterday = () => {\r\n        var date = new Date();\r\n        date.setHours(0,0,0,0);\r\n        date.setDate(date.getDate() - 1);\r\n        return date;\r\n    }\r\n\r\n    getDate = () => {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    getDocDate = () => {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n        var month = ((date.getMonth() + 1) < 10 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1));\r\n        var day = date.getDate() < 10 ? \"0\" + (date.getDate()) : date.getDate();\r\n\r\n        return year.toString().substring(2,4) + month + day;\r\n    }\r\n\r\n    setStartTime = (date) => {\r\n        if (this.props.user.isLogined) {\r\n            var userData = fireStore.collection('users').doc(this.props.user.userName);\r\n            if (this.state.id) {\r\n                userData.collection('work').doc(this.state.id).set({\r\n                    state: RUNNING,\r\n                    start: date,\r\n                    end: {}\r\n                });\r\n            } else {\r\n                userData.collection('work').add({\r\n                    state: RUNNING,\r\n                    start: date,\r\n                    end: {}\r\n                }).then(res => {\r\n                    this.setState({\r\n                        id: res.id\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    setEndTime = (date) => {\r\n        if (this.props.user.isLogined) {\r\n            var userData = fireStore.collection('users').doc(this.props.user.userName);\r\n            if (this.state.id) {\r\n                userData.collection('work').doc(this.state.id).update({\r\n                    end: date\r\n                });\r\n            } else {\r\n                alert('출근부터 해주세요.');\r\n            }\r\n        }\r\n    }\r\n\r\n    setComplete = () => {\r\n        if (this.props.user.isLogined) {\r\n            if (this.state.id) {\r\n                var userData = fireStore.collection('users').doc(this.props.user.userName);\r\n                userData.collection('work').doc(this.state.id).update({\r\n                    state: COMPLETE\r\n                }).then(res => {\r\n                    console.log(res);\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header date={this.getDate()}></Header>\r\n                <Main \r\n                    startWord=\"출근\"\r\n                    endWord=\"퇴근\" \r\n                    startTime={this.state.startTime} \r\n                    endTime={this.state.endTime}\r\n                    onClickStartTime={this.setStartTime}\r\n                    onClickEndTime={this.setEndTime}\r\n                    onClickComplete={this.setComplete}\r\n                    ></Main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state }),\r\n    { }\r\n)(Work)","import React from 'react'\r\n\r\nclass Logs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>log page</div>\r\n        )\r\n    }\r\n            \r\n}\r\n\r\nexport default Logs;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Home, Work, Study, Logs } from '../pages';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nconst Root = ({ store, persistor }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <Router basename=\"/working-hours\">\r\n                    <Route exact path=\"/\" component={Home}/>\r\n                    <Route path=\"/work\" component={Work}/>\r\n                    <Route path=\"/study\" component={Study}/>\r\n                    <Route path=\"/logs\" component={Logs}/>\r\n                </Router>\r\n            </PersistGate>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './router/Root';\r\nimport { createStore } from 'redux';\r\nimport userReducer from './store/user';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n};\r\n\r\nconst enhancedReducer = persistReducer(persistConfig, userReducer);\r\n\r\nconst store = createStore(enhancedReducer);\r\nconst persistor = persistStore(store);\r\n\r\nReactDOM.render(<Root store={store} persistor={persistor}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}