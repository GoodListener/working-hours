{"version":3,"sources":["component/header/Header.js","component/main/Main.js","serviceWorker.js","index.js","component/App.js"],"names":["props","id","className","date","Main","handleClickStartWork","Date","startWork","getHours","getMinutes","getSeconds","setState","handleClickEndWork","endWork","state","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getFullYear","getMonth","getDate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAGe,G,YAAA,SAAUA,GACrB,OACI,yBAAKC,GAAG,SAASC,UAAU,UAAUF,EAAMG,Q,mCCqCpCC,G,kBAtCb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KAORK,qBAAuB,WACrB,IAAIF,EAAO,IAAIG,KACXC,EAAYJ,EAAKK,WAAa,UAAOL,EAAKM,aAAe,UAAON,EAAKO,aAAe,SACxF,EAAKC,SAAS,CACZJ,UAAWA,KAZI,EAgBnBK,mBAAqB,WACnB,IAAIT,EAAO,IAAIG,KACXO,EAAUV,EAAKK,WAAa,UAAOL,EAAKM,aAAe,UAAON,EAAKO,aAAe,SACtF,EAAKC,SAAS,CACZE,QAASA,KAlBX,EAAKC,MAAQ,CACXP,UAAW,IACXM,QAAS,KAJM,E,sEAyBjB,OACE,yBAAKX,UAAU,QACb,yBAAKD,GAAG,YAAYC,UAAU,cAAca,KAAKD,MAAMP,WACvD,yBAAKN,GAAG,UAAUC,UAAU,YAAYa,KAAKD,MAAMD,SACnD,yBAAKZ,GAAG,YAAYC,UAAU,cAC1B,4BAAQD,GAAG,eAAeC,UAAU,mBAAmBc,QAASD,KAAKV,sBAArE,gBACA,4BAAQJ,GAAG,aAAaC,UAAU,mBAAmBc,QAASD,KAAKH,oBAAnE,sB,GAhCOK,IAAMC,YCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WAMX,OACI,yBAAKvB,UAAU,OACX,kBAAC,EAAD,CAAQC,KAPhB,WACI,IAAIA,EAAO,IAAIG,KACf,OAAOH,EAAKuB,cAAgB,WAAQvB,EAAKwB,WAAa,GAAK,UAAOxB,EAAKyB,UAAY,SAKjEA,KACd,kBAAC,EAAD,SDPI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdc964e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div id=\"header\" className=\"header\">{props.date}</div>\r\n    )\r\n}","import React from 'react';\nimport './Main.css';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startWork: '-',\n      endWork: '-'\n    }\n  }\n\n  handleClickStartWork = () => {\n    var date = new Date();\n    var startWork = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\n    this.setState({\n      startWork: startWork\n    });\n  }\n\n  handleClickEndWork = () => {\n    var date = new Date();\n    var endWork = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\n    this.setState({\n      endWork: endWork\n    });\n  }\n\n  render() {\n    return ( \n      <div className=\"Main\">\n        <div id=\"startWork\" className=\"start_work\">{this.state.startWork}</div>\n        <div id=\"endWork\" className=\"end_work\">{this.state.endWork}</div>\n        <div id=\"buttonBox\" className=\"button_box\">\n            <button id=\"startWorkBtn\" className=\"work_btn default\" onClick={this.handleClickStartWork}>출근</button>\n            <button id=\"endWorkBtn\" className=\"work_btn default\" onClick={this.handleClickEndWork}>퇴근</button>\n        </div>\n      </div>\n    ); \n  }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport Header from './header/Header'\r\nimport Main from './main/Main'\r\n\r\nexport default function() {\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main></Main>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}