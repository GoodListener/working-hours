{"version":3,"sources":["pages/home/Home.js","component/header/Header.js","component/main/Main.js","pages/study/Study.js","pages/work/Work.js","pages/logs/Logs.js","shared/App.js","router/Root.js","store/user.js","serviceWorker.js","index.js"],"names":["className","TextField","id","label","to","props","date","Main","handleClickStartWork","Date","start","getHours","getMinutes","getSeconds","setState","handleClickEndWork","end","state","this","onClick","React","Component","getFullYear","getMonth","getDate","console","log","Logs","App","exact","path","component","Home","Work","Study","Root","basename","initialState","isLogined","userName","Boolean","window","location","hostname","match","store","createStore","action","type","user","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1f809c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function() {\r\n    return (\r\n        <div className=\"home\">\r\n            <form>\r\n                <TextField \r\n                id=\"name\" \r\n                label=\"이름\"></TextField>\r\n            </form>\r\n            <div><Link to=\"work\">출퇴근</Link></div>\r\n            <div><Link to=\"study\">공부 타이머</Link></div>\r\n            <div><Link to=\"logs\">기록확인</Link></div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function (props) {\r\n    return (\r\n        <div id=\"header\" className=\"header\">{props.date}</div>\r\n    )\r\n}","import React from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: '-',\r\n      end: '-'\r\n    }\r\n  }\r\n\r\n  handleClickStartWork = () => {\r\n    var date = new Date();\r\n    var start = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n    this.setState({\r\n      start: start\r\n    });\r\n  }\r\n\r\n  handleClickEndWork = () => {\r\n    var date = new Date();\r\n    var end = date.getHours() + '시 ' + date.getMinutes() + '분 ' + date.getSeconds() + '초';\r\n    this.setState({\r\n      end: end\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"Main\">\r\n        <div id=\"start\" className=\"start_work\">{this.state.start}</div>\r\n        <div id=\"end\" className=\"end_work\">{this.state.end}</div>\r\n        <div id=\"buttonBox\" className=\"button_box\">\r\n            <button className=\"work_btn default\" onClick={this.handleClickStartWork}>{this.props.start}</button>\r\n            <button className=\"work_btn default\" onClick={this.handleClickEndWork}>{this.props.end}</button>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function() {\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main start=\"시작\" end=\"끝\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Header from '../../component/header/Header'\r\nimport Main from '../../component/main/Main'\r\n\r\nexport default function(props) {\r\n    console.log(props);\r\n\r\n    function getDate () {\r\n        var date = new Date();\r\n        return date.getFullYear() + '년 ' + (date.getMonth() + 1) + '월 ' + date.getDate() + '일'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header date={getDate()}></Header>\r\n            <Main start=\"출근\" end=\"퇴근\"></Main>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nclass Logs extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>log page</div>\r\n        )\r\n    }\r\n            \r\n}\r\n\r\nexport default Logs;","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Home, Work, Study, Logs } from '../pages';\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Route exact path=\"/\" component={Home}/>\r\n                <Route path=\"/work\" component={Work}/>\r\n                <Route path=\"/study\" component={Study}/>\r\n                <Route path=\"/logs\" component={Logs}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter basename=\"/working-hours\">\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;","const LOGIN = 'user/LOGIN';\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const login = user => ({type: login, user});\r\nexport const logout = user => ({type: logout, user});\r\n\r\nconst initialState = {\r\n    isLogined: false,\r\n    userName: '',\r\n};\r\n\r\nexport default function user(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN :\r\n            return {\r\n                ...state,\r\n                isLogined: true,\r\n                userName: action.user\r\n            };\r\n        case LOGOUT :\r\n            return {\r\n                ...state,\r\n                isLogined: false,\r\n                userName: action.user\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './router/Root';\r\nimport { createStore } from 'redux';\r\nimport userReducer from './store/user';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(userReducer);\r\n\r\nReactDOM.render(<Provider store={store}><Root /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}